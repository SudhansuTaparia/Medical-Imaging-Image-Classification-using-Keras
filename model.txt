from __future__ import print_function

import keras

from keras.datasets import mnist

from keras.models import Sequential

from keras.layers import Dense, Dropout, Flatten

from keras.layers import Conv2D, MaxPooling2D

from keras import backend as K

batch_size = 128

num_classes = 4

epochs = 12


# input image dimensions

img_rows, img_cols = 28, 28

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        'C:/Users/sutapari/Desktop/Data/training_images/train',
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
        'C:/Users/sutapari/Desktop/Data/training_images/validation',
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical')

model = Sequential()

model.add(Conv2D(32, kernel_size=(3, 3),

                 activation='relu',

                 input_shape=(3,150,150)))

model.add(Conv2D(64, (3, 3), activation='relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(128, activation='relu'))

model.add(Dropout(0.5))

model.add(Dense(4, activation='softmax'))



model.compile(loss=keras.losses.categorical_crossentropy,

              optimizer=keras.optimizers.Adadelta(),

              metrics=['accuracy'])


model.fit_generator(
        train_generator,
        steps_per_epoch=2000,
        epochs=1,
        validation_data=validation_generator,
        validation_steps=800)
import os, cv2, re, random

TEST_DIR = 'C:/Users/sutapari/Desktop/Data/test/'
test_images = [TEST_DIR+i for i in os.listdir(TEST_DIR)]

def prepare_data(list_of_images):
    """
    Returns two arrays: 
        x is an array of resized images
        y is an array of labels
    """
    x = [] # images as arrays
    y = [] # labels
    
    for image in list_of_images:
        x.append(cv2.resize(cv2.imread(image), (64,64), interpolation=cv2.INTER_CUBIC))
    
    for i in list_of_images:
        if '0' in i:
            y.append(0)
        elif '1' in i:
            y.append(1)
        elif '2' in i:
            y.append(2)
        elif '3' in i:
            y.append(3)

            
    return x, y
X_test, Y_test = prepare_data(test_images)

test_datagen = ImageDataGenerator(rescale=1. / 255)
